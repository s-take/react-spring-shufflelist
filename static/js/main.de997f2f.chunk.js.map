{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Item","styled","Paper","theme","typography","body1","textAlign","color","background","width","height","lineHeight","data","name","App","useState","rows","setRows","value","setValue","transitions","useTransition","map","y","itemHeight","key","item","from","opacity","leave","enter","update","className","Box","m","Grid","container","justifyContent","rowSpacing","xs","TextField","label","variant","onChange","event","target","sx","mr","Button","onClick","mt","slice","shuffle","style","t","index","div","zIndex","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAQMA,EAAOC,YAAOC,IAAPD,EAAc,gBAAGE,EAAH,EAAGA,MAAH,mBAAC,eACvBA,EAAMC,WAAWC,OADK,IAEzBC,UAAW,SACXC,MAAO,QACPC,WAAY,OACZC,MAAO,IACPC,OAAQ,GACRC,WAAY,YAGVC,EAAO,CAAC,CAAEC,KAAM,uBAAU,CAAEA,KAAM,uBAAU,CAAEA,KAAM,wBAyEzCC,MAvEf,WAAgB,IAAD,EACWC,mBAASH,GADpB,mBACNI,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAITT,EAAS,EAGPU,EAAcC,wBAClBL,EAAKM,KAAI,SAACV,GAAD,mBAAC,eACLA,GADI,IAEPW,GAAIb,GAAUc,IALD,GAMbd,OANa,QAQf,CACEe,IAAK,SAACC,GAAD,OAAeA,EAAKb,MACzBc,KAAM,CAAEjB,OAAQ,EAAGkB,QAAS,GAC5BC,MAAO,CAAEnB,OAAQ,EAAGkB,QAAS,GAC7BE,MAAO,kBAAoB,CAAEP,EAAtB,EAAGA,EAAsBb,OAAzB,EAAMA,OAA2BkB,QAAS,IACjDG,OAAQ,kBAAoB,CAAER,EAAtB,EAAGA,EAAsBb,OAAzB,EAAMA,WAIlB,OACE,qBAAKsB,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,UACE,8CACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,SAASC,WAAY,EAApD,UACE,eAACH,EAAA,EAAD,CAAMT,MAAI,EAACa,GAAI,GAAf,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,uFACNC,QAAQ,WACRC,SAAU,SAACC,GAAD,OAAWzB,EAASyB,EAAMC,OAAO3B,QAC3C4B,GAAI,CAAEC,GAAI,KAEZ,cAACC,EAAA,EAAD,CACEN,QAAQ,YACRO,QAAS,kBAAMhC,EAAQ,CAAC,CAAEJ,KAAMK,IAAV,mBAAsBF,MAC5C8B,GAAI,CAAEC,GAAI,EAAGG,GAAI,GAHnB,0BAOA,cAACF,EAAA,EAAD,CACEN,QAAQ,YACRO,QAAS,kBAAMhC,EAAQD,EAAKmC,MAAM,KAClCL,GAAI,CAAEI,GAAI,GAHZ,6BAQF,cAACjB,EAAA,EAAD,CAAKC,EAAG,IACR,eAACC,EAAA,EAAD,CAAMT,MAAI,EAACa,GAAI,GAAf,UACE,cAACS,EAAA,EAAD,CAAQN,QAAQ,YAAYO,QAAS,kBAAMhC,EAAQmC,IAAQpC,KAA3D,4CAGA,cAACiB,EAAA,EAAD,CAAKC,EAAG,OAEV,cAACC,EAAA,EAAD,CAAMT,MAAI,EAAV,SACGN,GAAY,SAACiC,EAAO3B,EAAM4B,EAAGC,GAAjB,OACX,cAAC,WAASC,IAAV,CAAcH,MAAK,aAAII,OAAQ7C,EAAK8C,OAASH,GAAUF,GAAvD,SACE,eAACrD,EAAD,WACGuD,EAAQ,EADX,MACiB7B,EAAKb,wBClEvB8C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.de997f2f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { useTransition, animated } from \"react-spring\";\nimport shuffle from \"lodash.shuffle\";\nimport { Box, Button, Grid, Paper, TextField } from \"@mui/material\";\n\nimport { styled } from \"@mui/material/styles\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body1,\n  textAlign: \"center\",\n  color: \"white\",\n  background: \"navy\",\n  width: 400,\n  height: 40,\n  lineHeight: \"40px\",\n}));\n\nlet data = [{ name: \"テストA\" }, { name: \"テストB\" }, { name: \"テストC\" }];\n\nfunction App() {\n  const [rows, setRows] = useState(data);\n  const [value, setValue] = useState(\"\");\n\n  let height = 0;\n  let itemHeight = 40;\n\n  const transitions = useTransition(\n    rows.map((data) => ({\n      ...data,\n      y: (height += itemHeight * 0.5) - itemHeight,\n      height: itemHeight,\n    })),\n    {\n      key: (item: any) => item.name,\n      from: { height: 0, opacity: 0 },\n      leave: { height: 0, opacity: 0 },\n      enter: ({ y, height }) => ({ y, height, opacity: 1 }),\n      update: ({ y, height }) => ({ y, height }),\n    }\n  );\n\n  return (\n    <div className=\"App\">\n      <Box m={4}>\n        <h2>Shuffle List</h2>\n        <Grid container justifyContent=\"center\" rowSpacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              label=\"入力して追加を押してください\"\n              variant=\"outlined\"\n              onChange={(event) => setValue(event.target.value)}\n              sx={{ mr: 4 }}\n            />\n            <Button\n              variant=\"contained\"\n              onClick={() => setRows([{ name: value }, ...rows])}\n              sx={{ mr: 4, mt: 2 }}\n            >\n              追加\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={() => setRows(rows.slice(1))}\n              sx={{ mt: 2 }}\n            >\n              削除\n            </Button>\n          </Grid>\n          <Box m={1} />\n          <Grid item xs={12}>\n            <Button variant=\"contained\" onClick={() => setRows(shuffle(rows))}>\n              シャッフル\n            </Button>\n            <Box m={4} />\n          </Grid>\n          <Grid item>\n            {transitions((style, item, t, index) => (\n              <animated.div style={{ zIndex: data.length - index, ...style }}>\n                <Item>\n                  {index + 1} : {item.name}\n                </Item>\n              </animated.div>\n            ))}\n          </Grid>\n        </Grid>\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}